// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['text!/Pages/play/view.html', 'avalon', 'api', 'page', 'avalon.cookie', 'select2'], function(pageMain, avalon, api, page) {
    var vm;
    avalon.templateCache.play_view = pageMain;
    vm = avalon.define({
      $id: 'view',
      title: '',
      mod: avalon.vmodels.play.mod,
      host: avalon.vmodels.play.host,
      service: avalon.vmodels.play.service,
      uid: avalon.vmodels.play.uid,
      url: null,
      loading: '/Assets/logic/common/loading.html',
      currentPage: 1,
      count: 12,
      setId: 0,
      videoId: 0,
      summaryShow: false,
      doggleSummary: function() {
        return vm.summaryShow = !vm.summaryShow;
      },
      rand_bg: function(el, platform) {
        var limg;
        limg = vm.set_bg(el, platform);
        return 'url(' + limg + ')';
      },
      set_bg: function(el, platform) {
        if (el['imgs'] && el['imgs'][vm.uid]) {
          return vm.host + el['imgs'][vm.uid];
        }
        if (indexOf.call(NOTSHOWIMG_PLATFORM, platform) >= 0) {
          return '/images/default.png';
        } else {
          return el['img'];
        }
      },
      error: '',
      emptyList: function(status) {
        if (status == null) {
          status = [];
        }
        vm.error = status;
        vm.videoList = [];
        vm.setting = {};
        vm.total = 0;
        vm.nextPageHtml = null;
        vm.rePageHtml = null;
        vm.currentVideoInfo = {};
        vm.currentVideoInfo.name_pyshow = [];
        vm.nameList = [];
        return vm.ondl = null;
      },
      videoCss: 'video-min',
      play: function(num) {
        var videoEle, videoInfo, videoStream;
        if (num == null) {
          num = '';
        }
        if ('' !== num) {
          videoInfo = vm.videoList[num];
          vm.setCurrentVideo(num);
        } else {
          videoInfo = vm.currentVideoInfo;
        }
        avalon.log(videoInfo);
        if (PLATFORM_ANDROIDTV === _clientInfo['platform']) {
          android.videoPlay(videoInfo.setId.$oid, videoInfo._id, vm.getVideoNum(num));
          return false;
        } else {
          videoStream = vm.setting['host'] + videoInfo['plays'][_clientInfo['uid']];
          videoEle = document.getElementById("playMain");
          videoEle.src = videoStream;
          videoEle.play();
          return $('#playMain').bind('ended', function() {
            $('#playMain').unbind('ended');
            videoEle.pause();
            return vm.playendCall(num);
          });
        }
      },
      playendCall: function(newNum) {
        var error;
        if (newNum) {
          newNum = parseInt(newNum) + 1;
        } else {
          newNum = 1;
        }
        if (vm.videoList.length <= 0) {
          return false;
        }
        try {
          vm.videoList[newNum];
          vm.play(newNum);
          return $("#FocusMovie" + newNum).focus();
        } catch (error) {
          return vm.nextPage();
        }
      },
      close: function() {
        var videoObj;
        videoObj = $("#playMain");
        videoObj.removeAttr('controls');
        return videoObj.removeAttr('src');
      },
      setPinyinEnToList: function(list) {
        var en, enList, i, j, len, len1, notZh, pinyin, pinyinList;
        if (!list || list.length <= 0) {
          return [];
        }
        notZh = /[A-Z|0-9]/;
        pinyinList = [];
        for (i = 0, len = list.length; i < len; i++) {
          pinyin = list[i];
          if (true === notZh.test(pinyin)) {
            enList = pinyin.split('');
            for (j = 0, len1 = enList.length; j < len1; j++) {
              en = enList[j];
              pinyinList.push(en);
            }
          } else {
            pinyinList.push(pinyin);
          }
        }
        return pinyinList;
      },
      setInfo: {},
      setNameList: [],
      getInfo: function() {
        vm.setInfo = {};
        vm.setNameList = [];
        return api.getApi('/videoset/get_info', {
          '_id': vm.setId
        }, function(result) {
          if (SUCCESS === result.code) {
            vm.setInfo = result.item;
            vm.setNameList = vm.setInfo['title'].split('');
            vm.setInfo.title_pyshow = vm.setPinyinEnToList(result.item.title_pyshow);
            avalon.vmodels.play.title = vm.setInfo['title'] + ' (' + vm.setInfo['now_episode'] + ')';
            document.title = avalon.vmodels.play.title;
            return vm.getVideoList();
          } else {
            return require(['logic/common/tips'], function(tips) {
              return tips.showTips(result.msg, 'error');
            });
          }
        });
      },
      getVideoNum: function(index) {
        return (parseInt(index) + 1) + ((vm.currentPage * vm.count) - vm.count);
      },
      dl: function(id) {
        return api.getApi('/videoset/set_todownload', {
          "id": id
        }, function(result) {
          if (SUCCESS === result.code) {
            return require(['logic/common/tips'], function(tips) {
              return tips.showTips('已加入下载队列, 请稍后查看', 'success', {
                'autoHide': 2000
              });
            });
          } else {
            return require(['logic/common/tips'], function(tips) {
              return tips.showTips(result.msg, 'error');
            });
          }
        });
      },
      setting: {},
      total: 0,
      totalPage: 0,
      videoList: [],
      rePageHtml: null,
      rePage: function() {
        vm.currentPage--;
        return vm.getVideoList();
      },
      nextPageHtml: null,
      nextPage: function() {
        document.documentElement.scrollTop = document.body.scrollTop = 0;
        avalon.log(vm.totalPage);
        avalon.log(vm.currentPage);
        vm.currentPage++;
        if (vm.currentPage <= vm.totalPage) {
          return vm.getVideoList();
        } else {
          vm.currentPage = 0;
          vm.nextPage();
          return require(['logic/common/tips'], function(tips) {
            return tips.showTips(avalon.vmodels.play.title + ' 已全部播放完毕', 'error', {
              'okVal': '',
              'autoHide': 3000
            });
          });
        }
      },
      nameList: [],
      ondl: null,
      setCurrentVideo: function(index) {
        if (vm.videoList[index]) {
          vm.currentVideoInfo = vm.videoList[index];
        } else {
          vm.currentVideoInfo = {
            "name": vm.setInfo['title'],
            "summary": vm.setInfo['summary'],
            "img": vm.setInfo['img'],
            "platform": vm.setInfo['platform']
          };
        }
        if (vm.setInfo['dl'] && indexOf.call(vm.setInfo['dl'], "1") >= 0) {
          vm.ondl = true;
        } else {
          vm.ondl = false;
        }
        avalon.log(vm.currentVideoInfo);
        vm.nameList = [];
        vm.nameList = vm.currentVideoInfo['name'].split('');
        return vm.currentVideoInfo.name_pyshow = vm.setPinyinEnToList(vm.currentVideoInfo.name_pyshow);
      },
      currentVideoInfo: {},
      getVideoList: function() {
        vm.emptyList('loading');
        return api.getApi('/videolist/get_list', {
          'page': vm.currentPage,
          'count': vm.count,
          'setId': vm.setId,
          'order': '_id',
          'direction': 1,
          'type': 'dl'
        }, function(result) {
          var pageMax, pageTotal;
          if (SUCCESS === result.code) {
            vm.emptyList();
            vm.videoList = result.list;
            vm.setting = result.setting;
            vm.setCurrentVideo(0);
            vm.total = result.total;
            vm.totalPage = Math.ceil(result.total / parseInt(vm.count));
            pageTotal = vm.count * vm.currentPage;
            pageMax = pageTotal + vm.count;
            if (pageMax > vm.total) {
              pageMax = vm.total;
            }
            if (pageTotal >= vm.total) {
              vm.nextPageHtml = null;
            } else {
              vm.nextPageHtml = pageTotal + 1 + ' - ' + pageMax + '集';
            }
            if (vm.currentPage === 1) {
              vm.rePageHtml = null;
            } else {
              vm.rePageHtml = parseInt(pageTotal - vm.count - vm.count) + ' - ' + (pageTotal - vm.count) + '集';
            }
            return setTimeout(function() {
              $(".FocusPlay").focus();
              if (PLATFORM_WEB === _clientInfo['platform']) {
                return vm.play('');
              }
            }, 200);
          } else if (ISEMPTY === result.code) {
            vm.emptyList(false);
            vm.setCurrentVideo(0);
            return setTimeout(function() {
              return $(".FocusPlay").focus();
            }, 200);
          } else {
            return require(['logic/common/tips'], function(tips) {
              return tips.showTips(result.msg, 'error');
            });
          }
        });
      },
      init: function(url) {
        avalon.log('play view page load complete');
        vm.url = url;
        vm.currentPage = 1;
        vm.setId = vm.url.setid;
        vm.videoId = vm.url.videoid;
        vm.ondl = false;
        vm.emptyList('loading');
        return vm.getInfo();
      }
    });
    return vm;
  });

}).call(this);

//# sourceMappingURL=view.js.map
