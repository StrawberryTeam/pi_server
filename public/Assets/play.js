// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require(['config'], function(config) {
    return require(['domReady!', 'avalon', 'jquery', 'api', 'utils', 'select2', 'mmRouter', 'jquery.placeholder'], function(domReady, avalon, $, api, utils) {
      var play;
      play = avalon.define({
        $id: 'play',
        title: '',
        module: 'loading',
        mod: null,
        service: null,
        query: null,
        url: null,
        needLogin: false,
        top_nav: '/Pages/play/top_nav.html',
        uid: 0,
        platform: 0,
        shownav: false,
        more: function() {
          return play.shownav = !play.shownav;
        },
        now_time: '',
        getNowTime: function() {},
        networkCheckKey: 'network_check',
        checkNetWork: function() {
          var networkCheckUid;
          return true;
          networkCheckUid = sessionStorage.getItem(play.networkCheckKey);
          if (parseInt(networkCheckUid) === parseInt(play.uid)) {
            return true;
          }
          if ('home' === play.mod || 'view' === play.mod) {
            api.getApi('/index/check_device', {
              uid: play.uid
            }, function(result) {
              if (SUCCESS === result.code) {

              } else {
                return require(['logic/common/tips'], function(tips) {
                  return tips.showTips('当前设备' + play.host_name + '与播放设备不在同一网域内, 请切换设备或刷新重试, 关闭页面不在提示', 'error', {
                    'okVal': '切换设备 [0]',
                    'okCall': function() {
                      return window.location.href = '/#!/play:select';
                    }
                  });
                });
              }
            });
            return sessionStorage.setItem(play.networkCheckKey, play.uid);
          }
        },
        render: function() {},
        setLoading: function() {
          return play.module = 'loading';
        },
        host: _playSetting.host,
        host_name: _playSetting.name,
        getHost: function(uid) {
          var setting, settingObj;
          setting = sessionStorage.getItem('setting_' + uid);
          if (setting) {
            settingObj = JSON.parse(setting);
            play.host = settingObj.host;
            return play.host_name = settingObj.host_name;
          } else {
            return api.getApi('/setting/getPlaySetting', {
              "uid": uid
            }, function(result) {
              avalon.log(result);
              if (SUCCESS === result.code) {
                play.host = result.item.host;
                play.host_name = result.item.name;
                return sessionStorage.setItem('setting_' + uid, JSON.stringify({
                  host: play.host,
                  host_name: play.host_name
                }));
              }
            });
          }
        },
        loadModulePage: function() {
          var avaiableService, modName, ref;
          play.uid = _clientInfo.uid;
          play.platform = _clientInfo.platform;
          if (!play.uid) {
            avalon.router.navigate('play:select');
          }
          avaiableService = ['play'];
          if (ref = play.service, indexOf.call(avaiableService, ref) < 0) {
            play.service = avaiableService[0];
          }
          if (play.mod === void 0) {
            play.mod = 'home';
          }
          if (play.url.query) {
            play.query = play.url.query;
          }
          modName = play.service + '/' + play.mod;
          return require(['logic/' + modName], function(module) {
            play.module = play.service + '_' + play.mod;
            avalon.scan();
            return module.init(play.url);
          });
        },
        setCurrentPage: function() {
          var serviceMod;
          serviceMod = this.params.mod.trim().split(':');
          play.service = serviceMod[0];
          play.mod = serviceMod[1];
          play.url = this.query;
          play.shownav = false;
          play.setLoading();
          return play.loadModulePage();
        },
        keyDo: function(key) {
          console.log("key " + key);
          switch (key) {
            case '0':
              return window.location.href = '/#!/play:select';
          }
        },
        init: function() {
          avalon.router.get("/:mod", play.setCurrentPage);
          return avalon.history.start({
            basepath: '/',
            interval: 20
          });
        }
      });
      document.onkeydown = function(e) {
        var isie, key;
        isie = document.all ? true : false;
        if (isie) {
          key = window.event.keyCode;
        } else {
          key = e.which;
        }
        switch (key) {
          case 48:
            return play.keyDo('0');
          case 49:
            return play.keyDo('1');
          case 50:
            return play.keyDo('2');
          case 51:
            return play.keyDo('3');
          case 52:
            return play.keyDo('4');
          case 53:
            return play.keyDo('5');
          case 54:
            return play.keyDo('6');
          case 55:
            return play.keyDo('7');
          case 56:
            return play.keyDo('8');
          case 57:
            return play.keyDo('9');
        }
      };
      play.init();
      return play;
    });
  });

}).call(this);

//# sourceMappingURL=play.js.map
